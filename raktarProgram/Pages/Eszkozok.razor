@page "/eszkozok"

@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions


@inject IEszkozRepository repo
@inject SearchService searchService;

<h3>Eszközök</h3> <input @bind="searchService.eszkozFilter.Kereses" @bind:event="oninput" /> 
<button class="btn btn-primary" @onclick="SearchEszkoz">
    Keresés
</button>
<DataGrid TItem="Eszkoz"
          Data="@lista"
          ReadData="@OnReadData"
          TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize" Editable="true" Bordered="true" Hoverable="true" Striped="true"
          RowInserted="@OnAfterInsert" RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate"
          RowRemoved="@OnAfterRemove">
    <DataGridCommandColumn TItem="Eszkoz">
        <NewCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked">
                Új felvétele
            </Button>
        </NewCommandTemplate>
        <EditCommandTemplate>

            <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">
                Módosítás
            </Blazorise.Button>

        </EditCommandTemplate>
        <DeleteCommandTemplate>

            <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">
                Törlés
            </Blazorise.Button>

        </DeleteCommandTemplate>
        <SaveCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked">Mentés</Button>
        </SaveCommandTemplate>
        <CancelCommandTemplate>
            <Button Color="Color.Secondary" Clicked="@context.Clicked">Mégse</Button>
        </CancelCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Nev)" Caption="Név" Editable="true" />
    <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Leiras)" Caption="Leírás" Editable="true" />
    <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Azonosito)" Caption="Azonosító" Editable="true" />
</DataGrid>

@code {
    List<Eszkoz> lista;

    int count;

    private async Task SearchEszkoz(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await repo.ListEszkoz(searchService.eszkozFilter, searchService.PageSize, 1);

        lista = response.Data; // an actual data for the current page
        count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }

    //https://blazorise.com/docs/extensions/datagrid/
    async Task OnReadData(DataGridReadDataEventArgs<Eszkoz> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await repo.ListEszkoz(searchService.eszkozFilter, e.PageSize, e.Page);

        lista = response.Data; // an actual data for the current page
        count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }

    void OnBeforeUpdate(CancellableRowChange<Eszkoz> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        //var mentettEszkoz = await repo.EszkozModositas(e.Item);

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }


    async Task OnAfterRemove(Eszkoz e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            e.Torolt = true;
            var mentettEszkoz = await repo.EszkozModositas(e);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }


    async Task OnAfterInsert(SavedRowItem<Eszkoz, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozFelvetel(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<Eszkoz, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}
