@page "/eszkozok"

@using Blazorise.Components
@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions


@inject IEszkozRepository repo
@inject IEszkozTipusRepository tipusrepo
@inject SearchService searchService

<h3>Eszközök</h3>
<AuthorizeView Roles="Admin,Leader,Visitor">
    <Authorized>


        <input @bind="searchService.eszkozFilter.Kereses" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="SearchEszkoz">
            Keresés
        </button>


        <DataGrid TItem="Eszkoz"
                  Data="@lista"
                  ReadData="@OnReadData"
                  TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize" Editable="true" Bordered="true" Hoverable="true" Striped="true"
                  RowInserted="@OnAfterInsert" RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate"
                  RowRemoved="@OnAfterRemove"
                  Sortable="true">

            <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Nev)" Caption="Név" Editable="true" />

            <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Leiras)" Caption="Leírás" Editable="true" />

            <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.Azonosito)" Caption="Azonosító" Editable="true" />

            <DataGridColumn TItem="Eszkoz" Field="@nameof(Eszkoz.EszkozTipusID)" Caption="Tipus" Editable="true" Sortable="true">

                <DisplayTemplate Context="displayContext">

                    @((displayContext as Eszkoz)?.Tipus.Nev)

                </DisplayTemplate>

                <EditTemplate Context="displayContext">

                    <SelectList Data="@tipuslista"
                                TextField="@((item)=>item.Nev)"
                                ValueField="@((item)=>item.ID)"
                                SelectedValue="@((int)( ( (CellEditContext)displayContext ).CellValue ))"
                                SelectedValueChanged="@(( v ) => ( (CellEditContext)displayContext ).CellValue = int.Parse((string)v))" />

                </EditTemplate>

            </DataGridColumn>

            <AuthorizeView Roles="Admin,Leader">

                <Authorized Context="autContext">


                    <DataGridCommandColumn TItem="Eszkoz">

                        <NewCommandTemplate Context="displayContext">

                            <Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                Új felvétele

                            </Button>

                        </NewCommandTemplate>

                        <EditCommandTemplate Context="displayContext">

                            <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                Módosítás

                            </Blazorise.Button>

                        </EditCommandTemplate>

                        <DeleteCommandTemplate Context="displayContext">

                            @if (displayContext.Item.HelyDarab == 0)
                            {

                                <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                    Törlés

                                </Blazorise.Button>


                            }

                        </DeleteCommandTemplate>

                        <SaveCommandTemplate Context="displayContext">

                            <Button Color="Color.Primary" Clicked="@displayContext.Clicked">Mentés</Button>

                        </SaveCommandTemplate>

                        <CancelCommandTemplate Context="displayContext">

                            <Button Color="Color.Secondary" Clicked="@displayContext.Clicked">Mégse</Button>

                        </CancelCommandTemplate>

                    </DataGridCommandColumn>

                </Authorized>

            </AuthorizeView>

        </DataGrid>

    </Authorized>

    <NotAuthorized>
        <Text>
            Nem vagy bejelentkezve, ezért nem férhetsz hozzá a tartalomhoz.
        </Text>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>
@code {
    List<Eszkoz> lista;

    List<EszkozTipus> tipuslista;

    string Kereses = null;

    int count;

    bool shouldWait = false;

    private async Task SearchEszkoz(MouseEventArgs e)
    {
        if (!shouldWait)
        {
            shouldWait = true;
            // this can be call to anything, in this case we're calling a fictional api
            var response = await repo.ListEszkoz(searchService.eszkozFilter, searchService.PageSize, 1);


            lista = response.Data; // an actual data for the current page
            count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work
            shouldWait = false;
            // always call StateHasChanged!
            StateHasChanged();
        }

    }

    async Task OnReadData(DataGridReadDataEventArgs<Eszkoz> e)
    {
        if (!shouldWait)
        {
            var request = new
            {
                Sort = e.Columns
                    .Where(_ => _.Direction != SortDirection.None)
                    .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
            };
            searchService.eszkozFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();

            // this can be call to anything, in this case we're calling a fictional api
            shouldWait = true;
            var response = await repo.ListEszkoz(searchService.eszkozFilter, e.PageSize, e.Page);

            var tipusok = await tipusrepo.ListEszkozTipus(null, 5, 1);
            tipuslista = tipusok.Data;

            lista = response.Data; // an actual data for the current page
            count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work
            shouldWait = false;
            // always call StateHasChanged!
            StateHasChanged();
        }
    }

    private async Task KeresesChanged(string kereses)
    {
        Kereses = kereses;
        StateHasChanged();
    }

    void OnBeforeUpdate(CancellableRowChange<Eszkoz> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        //var mentettEszkoz = await repo.EszkozModositas(e.Item);

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }


    async Task OnAfterRemove(Eszkoz e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {

            var helydarab = await repo.GetHelyCount(e);

            if (helydarab == 0)
            {
                e.Torolt = true;
                var mentettEszkoz = await repo.EszkozModositas(e);

                ts.Complete();
            }
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }


    async Task OnAfterInsert(SavedRowItem<Eszkoz, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozFelvetel(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<Eszkoz, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}
