@page "/eszkozhelytipusok"

@inject IEszkozHelyTipusRepository repo
@inject SearchService searchService

<h3>EszközHelyTipusok</h3>
<AuthorizeView Roles="Admin">
    <Authorized>


        <input @bind="searchService.eszkozHelyTipusFilter.Kereses" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="SearchEszkozHelyTipus">
            Keresés
        </button>
        <DataGrid TItem="EszkozHelyTipus"
                  Data="@lista"
                  ReadData="@OnReadData"
                  TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize" Editable="true" Bordered="true" Hoverable="true" Striped="true"
                  RowInserted="@OnAfterInsert" RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate"
                  RowRemoved="@OnAfterREmove">

            <DataGridColumn TItem="EszkozHelyTipus" Field="@nameof(EszkozHelyTipus.Nev)" Caption="Név" Editable="true" />

            <DataGridColumn TItem="EszkozHelyTipus" Field="@nameof(EszkozHelyTipus.Leiras)" Caption="Leírás" Editable="true" />

            <DataGridCommandColumn TItem="EszkozHelyTipus">

                <NewCommandTemplate Context="displayContext">

                    <Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Új felvétele

                    </Button>

                </NewCommandTemplate>

                <EditCommandTemplate Context="displayContext">

                    <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Módosítás

                    </Blazorise.Button>

                </EditCommandTemplate>

                <DeleteCommandTemplate Context="displayContext">

                    <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Törlés

                    </Blazorise.Button>

                </DeleteCommandTemplate>

                <SaveCommandTemplate Context="displayContext">

                    <Button Color="Color.Primary" Clicked="@displayContext.Clicked">Mentés</Button>

                </SaveCommandTemplate>

                <CancelCommandTemplate Context="displayContext">

                    <Button Color="Color.Secondary" Clicked="@displayContext.Clicked">Mégse</Button>

                </CancelCommandTemplate>

            </DataGridCommandColumn>

        </DataGrid>

    </Authorized>

    <NotAuthorized>
        <Text>
            Nem vagy bejelentkezve vagy nincs megefelelő jogosultságod a tartalom megtekintéséhez.
        </Text>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>
@code{
    List<EszkozHelyTipus> lista;

    int count;

    private async Task SearchEszkozHelyTipus(MouseEventArgs e)
    {
        var response = await repo.ListEszkozHelyTipus(searchService.eszkozHelyTipusFilter, searchService.PageSize, 1);

        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }

    async Task OnReadData(DataGridReadDataEventArgs<EszkozHelyTipus> e)
    {
        var request = new
        {
            Sort = e.Columns
                .Where(_ => _.Direction != SortDirection.None)
                .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
        };
        searchService.eszkozHelyTipusFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();

        var response = await repo.ListEszkozHelyTipus(searchService.eszkozHelyTipusFilter, e.PageSize, e.Page);

        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }


    void OnBeforeUpdate(CancellableRowChange<EszkozHelyTipus> e)
    {

        StateHasChanged();
    }

    async Task OnAfterREmove(EszkozHelyTipus e)
    {

        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            e.Torolt = true;
            var mentettEszkozHelyTipus = await repo.EszkozHelyTipusModositas(e);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterInsert(SavedRowItem<EszkozHelyTipus, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozHelyTipus = await repo.EszkozHelyTipusFelvetel(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<EszkozHelyTipus, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozHelyTipus = await repo.EszkozHelyTipusModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}


