@page "/ujbeszerzes"
@using Blazorise.Components
@inject IHomeRepository repo
@inject NavigationManager NavigationManager

<h1>Beszerzés</h1>

<AuthorizeView Roles="Admin,Leader">

    <Authorized>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mit:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <BlazoredTypeahead SearchMethod="selectedEszkozChangedHandler"
                                   @bind-Value="xmit"
                                   Context="item"
                                   placeholder="Kezdj el gépelni...">
                    <SelectedTemplate>
                        @item.Nev
                    </SelectedTemplate>
                    <ResultTemplate>
                        @item.Nev (@item.Leiras)
                    </ResultTemplate>
                    <NotFoundTemplate>
                        Nincs találat
                    </NotFoundTemplate>
                </BlazoredTypeahead>

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Hova:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <BlazoredTypeahead SearchMethod="selectedHovaChangedHandler"
                                   @bind-Value="xhova"
                                   Context="item"
                                   placeholder="Kezdj el gépelni...">
                    <SelectedTemplate>
                        @item.Nev
                    </SelectedTemplate>
                    <ResultTemplate>
                        @item.Nev (@item.Leiras)
                    </ResultTemplate>
                    <NotFoundTemplate>
                        Nincs találat
                    </NotFoundTemplate>
                </BlazoredTypeahead>

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mennyit:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <input @bind="mennyit" @bind:event="oninput" />

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mikor:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <DateEdit @bind-Date="xmikor" />

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Megjegyzés:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <input @bind="megjegyzes" @bind:event="oninput" size="100" />

            </Column>

        </Row>

        <button class="btn btn-primary" @onclick="Mentes">

            Hozzáadás

        </button>

        <Alert @ref="myAlert" Color="Color.Warning" Dismisable="true">

            <AlertDescription>

                Figyelem!

            </AlertDescription>

            <AlertMessage>

                @hibauzenet

            </AlertMessage>

            <CloseButton Clicked="@(()=>myAlert.Hide())" />

        </Alert>

    </Authorized>

    <NotAuthorized>

        <Text>

            Nem vagy bejelentkezve, vagy nincs jogosultságod hozzáférni a tartalomhoz.

        </Text>

        <LoginDisplay />

    </NotAuthorized>

</AuthorizeView>

@code {
    List<Eszkoz> xmitLista = null;
    List<EszkozHely> xhovaList = null;
    Eszkoz xmit;
    EszkozHely xhova;
    int mennyit;
    string megjegyzes;
    DateTime xmikor = DateTime.Now;
    Alert myAlert;
    string hibauzenet;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.xmitLista = await this.repo.GetXMitBeszerzesList();
            this.xmitLista.Insert(0, new Eszkoz());
            this.xhovaList = await this.repo.GetXHovaBeszerzesList();
            this.xhovaList.Insert(0, new EszkozHely());
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Eszkoz>> selectedEszkozChangedHandler(string searchText)
    {
        if(xmitLista[0].Nev == null)
        {
            xmitLista.RemoveAt(0);
        }

        return xmitLista.Where(x => x.Nev.ToLower().Contains(searchText.ToLower())).ToList();
    }


    private async Task<IEnumerable<EszkozHely>> selectedHovaChangedHandler(string searchText)
    {
        if (xhovaList[0].Nev == null)
        {
            xhovaList.RemoveAt(0);
        }

        return xhovaList.Where(x => x.Nev.ToLower().Contains(searchText.ToLower())).ToList();
    }

    private async Task Mentes(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {

            var eredmeny = await repo.Xbeszerzes(xmit, xhova, xmikor, mennyit, megjegyzes);
            if (eredmeny != raktarProgram.Repositories.HomeRepository.sikeresFelvetel)
            {
                hibauzenet = eredmeny;
                myAlert.Show();
            }
            else
            {
                ts.Complete();
                NavigationManager.NavigateTo("/");
            }
        }

        // always call StateHasChanged!
        StateHasChanged();
    }
}

