@page "/"

@inject IHomeRepository repo
@inject SearchService searchService
@using Microsoft.AspNetCore.Mvc.ViewFeatures

<h3>Raktár</h3>
<AuthorizeView Roles="Admin,Leader">

    <Authorized>

        <Button Color="Color.Primary">

            <a href="/ujatadas" style="color:white">Eszköz kiadás/visszatevés</a>

        </Button>

        <Button Color="Color.Primary">

            <a href="/ujbeszerzes" style="color:white">Új beszerzés</a>

        </Button>

    </Authorized>

</AuthorizeView>




<Collapse Visible="@collapse1Visible">

    <CollapseHeader>

        <input @bind="searchService.homeFilter.Kereses" @bind:event="oninput" @onfocusin="@(()=>collapse1Visible=true)" />

        <Button Color="Color.Primary" @onclick="SearchHely">

            Keresés

        </Button>

    </CollapseHeader>

    <CollapseBody>

        <Row>

            <Column ColumnSize="ColumnSize.Is2">

                <Text>Időre szűrés: </Text>

            </Column>

            <Column ColumnSize="ColumnSize.Is10">

                <DateEdit Placeholder="@ma" @bind-Date="searchService.homeFilter.Mikor"></DateEdit>

            </Column>

        </Row>

        <hr />

        <Row>

            <Column ColumnSize="ColumnSize.Is12">

                <Check TValue="bool" @bind-Checked="searchService.homeFilter.Elotte">A megadott időpont elöttieket listázza ki</Check>

            </Column>

        </Row>

        <hr />

        <Row>

            <Column ColumnSize="ColumnSize.Is2">

                <Text>Mennyiségre keresés</Text>

            </Column>

            <Column ColumnSize="ColumnSize.Is10">

                <NumericEdit @bind-Value="searchService.homeFilter.Mennyiseg"></NumericEdit>

            </Column>

        </Row>

        <CloseButton Clicked="@(()=>collapse1Visible = false)" />

    </CollapseBody>

</Collapse>

<DataGrid TItem="Hely"
          Data="@lista"
          ReadData="@OnReadData"
          TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize"
          Editable="false" Bordered="true" Hoverable="true" Striped="true" Sortable="true">

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.EszkozID)" Caption="Micsoda" Sortable="true">

        <DisplayTemplate>

            @((context as Hely )?.Eszkoz.Nev)

        </DisplayTemplate>

    </DataGridColumn>

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.EszkozHelyID)" Caption="Hol" Sortable="true">

        <DisplayTemplate>

            @((context as Hely )?.EszkozHely.Nev)

        </DisplayTemplate>

    </DataGridColumn>

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.Mennyiseg)" Caption="Mennyit" Sortable="true" />

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.Mikortol)" Caption="Mikortól" Sortable="true" />

    <DataGridCommandColumn TItem="Hely">

        <NewCommandTemplate Context="displayContext">

            <Button hidden />

        </NewCommandTemplate>

        <EditCommandTemplate Context="displayContext">

            <Button hidden />

        </EditCommandTemplate>

        <DeleteCommandTemplate Context="displayContext">

            <Button hidden />

        </DeleteCommandTemplate>

    </DataGridCommandColumn>

</DataGrid>

@code{

    bool collapse1Visible = false;
    List<Hely> lista;
    string ma = DateTime.Now.ToString();
    int count;

    private async Task SearchHely(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await repo.ListHome(searchService.homeFilter, searchService.PageSize, 1);

        lista = response.Data; // an actual data for the current page
        count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnReadData(DataGridReadDataEventArgs<Hely> e)
    {
        var request = new
        {
            Sort = e.Columns
               .Where(_ => _.Direction != SortDirection.None)
               .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
        };
        searchService.homeFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();

        var response = await repo.ListHome(searchService.homeFilter, searchService.PageSize, e.Page);

        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }

    void OnBeforeUpdate(CancellableRowChange<Eszkoz> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        //var mentettEszkoz = await repo.EszkozModositas(e.Item);

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}

