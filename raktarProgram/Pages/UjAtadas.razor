@page "/ujatadas"
@using Blazorise.Components
@using System.Threading.Tasks
@using Blazored.Typeahead
@inject IHomeRepository repo
@inject NavigationManager NavigationManager


<h1>Átadás</h1>

<AuthorizeView Roles="Admin,Leader">

    <Authorized>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mit:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                @*
                    <Autocomplete Data="@xmitLista"
                                  TextField="@((item)=>item.Nev)"
                                  ValueField="@((item)=>item.Nev)"
                                  Placeholder="Kezdj el gépelni..."
                                  SelectedValue="@selectedEszkoz"
                                  SelectedValueChanged="@selectedEszkozChangedHandler"
                                  Filter="AutocompleteFilter.StartsWith" />*@


                @*<SelectList Data="@xmitLista"
                    TextField="@((item)=>item.Nev)"
                    ValueField="@((item)=>item.ID)"
                    SelectedValueChanged="@selectedEszkozChangedHandler" />*@

                <BlazoredTypeahead SearchMethod="SearchEszkoz"
                                   TValue="Eszkoz"
                                   TItem="Eszkoz"
                                   Value="xmit"
                                   ValueChanged="selectedEszkozChangedHandler"
                                   ValueExpression="@(() => xmit)"
                                   placeholder="Kezdj el gépelni..."
                                   Context="item"
                                   MinimumLength="0">
                    <SelectedTemplate>
                        @item.Nev
                    </SelectedTemplate>
                    <ResultTemplate>
                        @item.Nev (@item.Leiras)
                    </ResultTemplate>
                    <NotFoundTemplate>
                        Nincs találat
                    </NotFoundTemplate>

                </BlazoredTypeahead>
            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Honnan:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <BlazoredTypeahead SearchMethod="SearchHely"
                                   TValue="Hely"
                                   TItem="Hely"
                                   Value="xkitol"
                                   ValueChanged="selectedHelyChangedHandler"
                                   ValueExpression="@(() => xkitol)"
                                   placeholder="Kezdj el gépelni..."
                                   Context="item"
                                   MinimumLength="0">

                    <SelectedTemplate>
                        @item.EszkozHely.Nev
                    </SelectedTemplate>
                    <ResultTemplate>
                        @item.EszkozHely.Nev (@item.EszkozHely.Leiras)
                    </ResultTemplate>
                    <NotFoundTemplate>
                        Nincs találat
                    </NotFoundTemplate>

                </BlazoredTypeahead>
                @*<SelectList Data="@xkitolList"
                    TextField="@((item)=>item.EszkozhelyNev)"
                    ValueField="@((item)=>item.ID)"
                    SelectedValueChanged="@selectedHelyChangedHandler" />*@

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Hova:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">
                <BlazoredTypeahead SearchMethod="SearchHova"
                                   TValue="EszkozHely"
                                   TItem="EszkozHely"
                                   Value="xhova"
                                   ValueChanged="selectedHovaChangedHandler"
                                   ValueExpression="@(() => xhova)"
                                   placeholder="Kezdj el gépelni..."
                                   Context="item"
                                   MinimumLength="0">

                    <SelectedTemplate>
                        @item.Nev
                    </SelectedTemplate>
                    <ResultTemplate>
                        @item.Nev (@item.Leiras)
                    </ResultTemplate>
                    <NotFoundTemplate>
                        Nincs találat
                    </NotFoundTemplate>

                </BlazoredTypeahead>
                @*<SelectList Data="@xhovaList"
        TextField="@((item)=>item.Nev)"
        ValueField="@((item)=>item.ID)"
        SelectedValueChanged="@selectedHovaChangedHandler" />*@

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mennyit:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <input @bind="mennyit" @bind:event="oninput" />

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Mikor:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <DateEdit @bind-Date="xmikor" />

            </Column>

        </Row>

        <Row>

            <Column ColumnSize="ColumnSize.Is3">

                <Alert Color="Color.Primary" Visible="true">

                    Megjegyzés:

                </Alert>

            </Column>

            <Column ColumnSize="ColumnSize.Is9">

                <input @bind="megjegyzes" @bind:event="oninput" size="100" />

            </Column>

        </Row>

        <button class="btn btn-primary" @onclick="Mentes">

            Átadás

        </button>


        <Alert @ref="myAlert" Color="Color.Warning" Dismisable="true">

            <AlertDescription>

                Figyelem!

            </AlertDescription>

            <AlertMessage>

                @hibauzenet

            </AlertMessage>

            <CloseButton Clicked="@(()=>myAlert.Hide())" />

        </Alert>

    </Authorized>

    <NotAuthorized>
        <Text>

            Nincs megfelelő jogosultságod, vagy nem vagy bejelentkezve.

        </Text>

        <LoginDisplay />

    </NotAuthorized>

</AuthorizeView>
@code {
    List<Eszkoz> xmitLista = null;
    List<Hely> xkitolList = null;
    List<EszkozHely> xhovaList = null;
    Eszkoz xmit;
    Eszkoz xmit_value;

    Hely xkitol;
    EszkozHely xhova;
    int mennyit;
    string megjegyzes;
    DateTime xmikor = DateTime.Now;
    Alert myAlert;
    string hibauzenet;
    Eszkoz selectedEszkoz;
    Hely selectedHely;
    EszkozHely selectedHova;

    protected override void OnInitialized()
    {
        OnAfterRenderAsync(true);
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.xmitLista = await this.repo.GetXMitList();
            this.xmitLista.Insert(0, new Eszkoz());
            Task.WaitAll();
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Eszkoz>> SearchEszkoz(string searchText)
    {
        if (xmitLista[0].Nev == null)
        {
            xmitLista.RemoveAt(0);
        }

        return xmitLista.Where(x => x.Nev.ToLower().Contains(searchText.ToLower())).ToList();
    }

    private async Task<IEnumerable<Hely>> SearchHely(string searchText)
    {
        if (xkitolList[0].EszkozHely == null)
        {
            xkitolList.RemoveAt(0);
        }

        return xkitolList.Where(x => x.EszkozHely.Nev.ToLower().Contains(searchText.ToLower())).ToList();
    }

    private async Task<IEnumerable<EszkozHely>> SearchHova(string searchText)
    {
        if (xhovaList[0].Nev == null)
        {
            xhovaList.RemoveAt(0);
        }

        return xhovaList.Where(x => x.Nev.ToLower().Contains(searchText.ToLower())).ToList();
    }

    private async Task selectedEszkozChangedHandler(Eszkoz newEszkoz)
    {
        xmit = this.xmitLista.First(c => c.ID == newEszkoz.ID);
        selectedEszkoz = xmit;
        this.xkitolList = await this.repo.GetXKitolList(xmit.ID);
        this.xkitolList.Insert(0, new Hely());
        StateHasChanged();
    }

    async Task selectedHelyChangedHandler(Hely newHely)
    {
        xkitol = this.xkitolList.First(c => c.ID == newHely.ID);
        selectedHely = newHely;
        this.xhovaList = await this.repo.GetXHovaList(xkitol.EszkozHelyID);
        this.xhovaList.Insert(0, new EszkozHely());
        StateHasChanged();
    }

    async Task selectedHovaChangedHandler(EszkozHely newHova)
    {
        xhova = this.xhovaList.First(c => c.ID == newHova.ID);
        selectedHova = newHova;
        StateHasChanged();
    }

    private async Task Mentes(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {

            var eredmeny = await repo.Xmentes(xmit, xkitol, xhova, xmikor, mennyit, megjegyzes);
            if (eredmeny != raktarProgram.Repositories.HomeRepository.sikeresFelvetel)
            {
                hibauzenet = eredmeny;
                myAlert.Show();
            }
            else
            {
                ts.Complete();
                NavigationManager.NavigateTo("/");
            }
        }

        // always call StateHasChanged!
        StateHasChanged();
    }
}
