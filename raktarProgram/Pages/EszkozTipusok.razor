@page "/eszkoztipusok"

@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions

@inject IEszkozTipusRepository repo
@inject SearchService searchService


<h3>EszközökTipusok</h3>
<AuthorizeView Roles="Admin,Leader,Visitor">
    <Authorized>


        <input @bind="searchService.eszkozTipusFilter.Kereses" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="SearchEszkozTipus">
            Keresés
        </button>

        <DataGrid TItem="EszkozTipus"
                  Data="@lista"
                  ReadData="@OnReadData"
                  TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize" Editable="true" Bordered="true" Hoverable="true" Striped="true"
                  RowInserted="@OnAfterInsert" RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate"
                  RowRemoved="@OnAfterRemove"
                  Sortable="true">

            <DataGridColumn TItem="EszkozTipus" Field="@nameof(EszkozTipus.Nev)" Caption="Név" Editable="true" />

            <DataGridColumn TItem="EszkozTipus" Field="@nameof(EszkozTipus.Leiras)" Caption="Leírás" Editable="true" />

            <DataGridCommandColumn TItem="EszkozTipus">

                <NewCommandTemplate Context="displayContext">

                    <Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Új felvétele

                    </Button>

                </NewCommandTemplate>

                <EditCommandTemplate Context="displayContext">

                    <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Módosítás

                    </Blazorise.Button>

                </EditCommandTemplate>

                <DeleteCommandTemplate Context="displayContext">

                    <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                        Törlés

                    </Blazorise.Button>

                </DeleteCommandTemplate>

                <SaveCommandTemplate Context="displayContext">

                    <Button Color="Color.Primary" Clicked="@displayContext.Clicked">Mentés</Button>

                </SaveCommandTemplate>

                <CancelCommandTemplate Context="displayContext">

                    <Button Color="Color.Secondary" Clicked="@displayContext.Clicked">Mégse</Button>

                </CancelCommandTemplate>

            </DataGridCommandColumn>

        </DataGrid>

    </Authorized>

    <NotAuthorized>
        <Text>
            Nem vagy bejelentkezve, vagy nincs jogosultságod megtekinteni az adatokat.
        </Text>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>
@code {
    List<EszkozTipus> lista;


    string Kereses = null;

    int count;
    bool shouldWait = false;

    private async Task SearchEszkozTipus(MouseEventArgs e)
    {
        if (!shouldWait)
        {
            shouldWait = true;
            var response = await repo.ListEszkozTipus(searchService.eszkozTipusFilter, searchService.PageSize, 1);
            shouldWait = false;

            lista = response.Data;
        }

    }

    async Task OnReadData(DataGridReadDataEventArgs<EszkozTipus> e)
    {
        if (!shouldWait)
        {
            var request = new
            {
                Sort = e.Columns
                    .Where(_ => _.Direction != SortDirection.None)
                    .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })
            };
            searchService.eszkozTipusFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();
            shouldWait = true;
            var response = await repo.ListEszkozTipus(searchService.eszkozTipusFilter, e.PageSize, e.Page);
            shouldWait = false;
            lista = response.Data;
            count = response.Total;

            StateHasChanged();
        }
    }

    private async Task KeresesChanged(string kereses)
    {
        Kereses = kereses;
        StateHasChanged();
    }

    void OnBeforeUpdate(CancellableRowChange<EszkozTipus> e)
    {
        StateHasChanged();
    }


    async Task OnAfterRemove(EszkozTipus e)
    {

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            e.Torolt = true;
            var mentettEszkozTipus = await repo.EszkozTipusTorles(e.ID);
            ts.Complete();
        }

        StateHasChanged();
    }


    async Task OnAfterInsert(SavedRowItem<EszkozTipus, Dictionary<string, object>> e)
    {

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozTipus = await repo.EszkozTipusFelvetel(e.Item);
            ts.Complete();
        }

        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<EszkozTipus, Dictionary<string, object>> e)
    {

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozTipus = await repo.EszkozTipusModositas(e.Item);
            ts.Complete();
        }

        StateHasChanged();
    }
}
