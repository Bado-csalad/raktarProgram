@page "/eszkozhelyek"

@using Blazorise.Components
@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions

@inject IEszkozHelyRepository repo
@inject IEszkozHelyTipusRepository tipusrepo
@inject SearchService searchService;

<h3>EszközHelyek</h3>
<input @bind="searchService.eszkozHelyFilter.Kereses" @bind:event="oninput" />
<button class="btn btn-primary" @onclick="SearchEszkozHely">
    Keresés
</button>

<DataGrid TItem="EszkozHely"
          Data="@lista"
          ReadData="@OnReadData"
          TotalItems="@count" ShowPager="true" PageSize="5" Editable="true" Bordered="true" Hoverable="true" Striped="true" Sortable="true"
          RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate" RowInserted="@OnAfterInsert">

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Nev)" Caption="Név" Editable="true" Sortable="true" />

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Leiras)" Caption="Leírás" Editable="true" Sortable="true" />

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Telefon)" Caption="Azonosító" Editable="true" Sortable="true" />

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Cim)" Caption="Cím" Editable="true" Sortable="true" />

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Email)" Caption="Email" Editable="true" Sortable="true" />

    <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.TipusID)" Caption="Tipus" Editable="true" Sortable="true">

        <DisplayTemplate>

            @((context as EszkozHely )?.Tipus.Nev)

        </DisplayTemplate>

        <EditTemplate>

            <SelectList Data="@tipuslista"
                        TextField="@((item)=>item.Nev)"
                        ValueField="@((item)=>item.ID)"
                        SelectedValue="@((int)( ( (CellEditContext)context ).CellValue ))"
                        SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = int.Parse((string)v))" />

        </EditTemplate>

    </DataGridColumn>

    <DataGridCommandColumn TItem="EszkozHely">

        <NewCommandTemplate>

            <Button Color="Color.Primary" Clicked="@context.Clicked">

                Új felvétele

            </Button>

        </NewCommandTemplate>

        <EditCommandTemplate>

            <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">

                Módosítás

            </Blazorise.Button>

        </EditCommandTemplate>

        <DeleteCommandTemplate>

            <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">

                Törlés

            </Blazorise.Button>

        </DeleteCommandTemplate>

        <SaveCommandTemplate>

            <Button Color="Color.Primary" Clicked="@context.Clicked">Mentés</Button>

        </SaveCommandTemplate>

        <CancelCommandTemplate>

            <Button Color="Color.Secondary" Clicked="@context.Clicked">Mégse</Button>

        </CancelCommandTemplate>

    </DataGridCommandColumn>

</DataGrid>

@code {
    List<EszkozHely> lista;
    List<EszkozHelyTipus> tipuslista;

    int count;
    private async Task SearchEszkozHely(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await repo.ListEszkozHely(searchService.eszkozHelyFilter, searchService.PageSize, 1);


        lista = response.Data; // an actual data for the current page
        count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();

    }

    async Task OnAfterInsert(SavedRowItem<EszkozHely, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozHelyFelvetel(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnReadData(DataGridReadDataEventArgs<EszkozHely> e)
    {
        var request = new
        {
            Sort = e.Columns
                .Where(_ => _.Direction != SortDirection.None)
                .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
        };
        searchService.eszkozHelyFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();

        var response = await repo.ListEszkozHely(searchService.eszkozHelyFilter, e.PageSize, e.Page);

        var tipusok = await tipusrepo.ListEszkozHelyTipus(null, 5, 1);
        tipuslista = tipusok.Data;
        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }

    void OnBeforeUpdate(CancellableRowChange<EszkozHely> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<EszkozHely, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozHely = await repo.EszkozHelyModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}