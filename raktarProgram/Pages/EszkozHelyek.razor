@page "/eszkozhelyek"

@using Blazorise.Components
@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions

@inject IEszkozHelyRepository repo
@inject IEszkozHelyTipusRepository tipusrepo
@inject SearchService searchService;

<h3>EszközHelyek</h3>
<AuthorizeView Roles="Admin,Leader,Visitor">
    <Authorized>


        <input @bind="searchService.eszkozHelyFilter.Kereses" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="SearchEszkozHely">
            Keresés
        </button>

        <DataGrid TItem="EszkozHely"
                  Data="@lista"
                  ReadData="@OnReadData"
                  TotalItems="@count" ShowPager="true" PageSize="5" Editable="true" Bordered="true" Hoverable="true" Striped="true" Sortable="true"
                  RowUpdated="@OnAfterUpdate" RowUpdating="@OnBeforeUpdate" RowInserted="@OnAfterInsert">

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Nev)" Caption="Név" Editable="true" Sortable="true" />

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Leiras)" Caption="Leírás" Editable="true" Sortable="true" />

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Telefon)" Caption="Azonosító" Editable="true" Sortable="true" />

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Cim)" Caption="Cím" Editable="true" Sortable="true" />

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.Email)" Caption="Email" Editable="true" Sortable="true" />

            <DataGridColumn TItem="EszkozHely" Field="@nameof(EszkozHely.TipusID)" Caption="Tipus" Editable="true" Sortable="true">

                <DisplayTemplate Context="displayContext">

                    @((displayContext as EszkozHely )?.Tipus.Nev)

                </DisplayTemplate>

                <EditTemplate Context="displayContext">

                    <SelectList Data="@tipuslista"
                                TextField="@((item)=>item.Nev)"
                                ValueField="@((item)=>item.ID)"
                                SelectedValue="@((int)( ( (CellEditContext)displayContext ).CellValue ))"
                                SelectedValueChanged="@(( v ) => ( (CellEditContext)displayContext ).CellValue = int.Parse((string)v))" />

                </EditTemplate>

            </DataGridColumn>

            <AuthorizeView Roles="Admin,Leader">

                <Authorized Context="authContext">


                    <DataGridCommandColumn TItem="EszkozHely">

                        <NewCommandTemplate Context="displayContext">

                            <Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                Új felvétele

                            </Button>

                        </NewCommandTemplate>

                        <EditCommandTemplate Context="displayContext">

                            <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                Módosítás

                            </Blazorise.Button>

                        </EditCommandTemplate>

                        <DeleteCommandTemplate Context="displayContext">

                            <Blazorise.Button Color="Color.Primary" Clicked="@displayContext.Clicked">

                                Törlés

                            </Blazorise.Button>

                        </DeleteCommandTemplate>

                        <SaveCommandTemplate Context="displayContext">

                            <Button Color="Color.Primary" Clicked="@displayContext.Clicked">Mentés</Button>

                        </SaveCommandTemplate>

                        <CancelCommandTemplate Context="displayContext">

                            <Button Color="Color.Secondary" Clicked="@displayContext.Clicked">Mégse</Button>

                        </CancelCommandTemplate>

                    </DataGridCommandColumn>

                </Authorized>

            </AuthorizeView>

        </DataGrid>

    </Authorized>

    <NotAuthorized>

        <Text>

            Nem vagy bejelentkezve, ezért nem férhetsz hozzá ezekhez az adatokhoz.

        </Text>

        <LoginDisplay />

    </NotAuthorized>

</AuthorizeView>

@code {
    List<EszkozHely> lista;
    List<EszkozHelyTipus> tipuslista;

    int count;
    bool shouldWait = false;
    private async Task SearchEszkozHely(MouseEventArgs e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await repo.ListEszkozHely(searchService.eszkozHelyFilter, searchService.PageSize, 1);


        lista = response.Data; // an actual data for the current page
        count = response.Total; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();

    }

    async Task OnAfterInsert(SavedRowItem<EszkozHely, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkoz = await repo.EszkozHelyFelvetel(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnReadData(DataGridReadDataEventArgs<EszkozHely> e)
    {
        if (!shouldWait)
        {
            var request = new
            {
                Sort = e.Columns
                    .Where(_ => _.Direction != SortDirection.None)
                    .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
            };
            searchService.eszkozHelyFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();
            shouldWait = true;
            var response = await repo.ListEszkozHely(searchService.eszkozHelyFilter, e.PageSize, e.Page);

            var tipusok = await tipusrepo.ListEszkozHelyTipus(null, 5, 1);
            tipuslista = tipusok.Data;
            lista = response.Data;
            count = response.Total;
            shouldWait = false;
            StateHasChanged();
        }
    }

    void OnBeforeUpdate(CancellableRowChange<EszkozHely> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<EszkozHely, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettEszkozHely = await repo.EszkozHelyModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }
}