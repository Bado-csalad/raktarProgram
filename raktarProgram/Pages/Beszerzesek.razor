@page "/beszerzesek"

@using Blazorise.Components
@using raktarProgram.Data
@using raktarProgram.Data.Filters
@using raktarProgram.Interfaces
@using Blazorise.DataGrid
@using System.Transactions

@inject IHomeRespitory repo
@inject SearchService searchService

<h3>Beszerzesek</h3>
<Collapse Visible="@collapse1Visible">
    <CollapseHeader>

        <input @bind="searchService.atadasFilter.Kereses" @bind:event="oninput" @onfocusin="@(()=>collapse1Visible=true)" />

        <Button Color="Color.Primary" @onclick="SearchHely">
            Keresés
        </Button>

    </CollapseHeader>
    <CollapseBody>

        <Row>
            <Column ColumnSize="ColumnSize.Is2">
                <Text>Időre szűrés: </Text>
            </Column>
            <Column ColumnSize="ColumnSize.Is10">
                <DateEdit Placeholder="@ma" @bind-Date="searchService.beszerezesFilter.Mikor"></DateEdit>
            </Column>
        </Row>

        <Row>
            <Check TValue="bool" @bind-Checked="searchService.beszerezesFilter.Elotte">A megadott időpont elöttieket listázza ki</Check>
        </Row>

        <Row>
            <Column ColumnSize="ColumnSize.Is2">
                <Text>Mennyiségre keresés</Text>
            </Column>
            <Column ColumnSize="ColumnSize.Is10">
                <NumericEdit @bind-Value="searchService.beszerezesFilter.Mennyiseg"></NumericEdit>
            </Column>
        </Row>

        <CloseButton Clicked="@(()=>collapse1Visible = false)" />

    </CollapseBody>
</Collapse>

<DataGrid TItem="Hely"
          Data="@lista"
          ReadData="@OnReadData"
          TotalItems="@count" ShowPager="true" PageSize="searchService.PageSize" Editable="true" Bordered="true" Hoverable="true" Striped="true"
          RowUpdated="@OnAfterUpdate"
          RowRemoved="@OnAfterDeleted">
    <DataGridCommandColumn TItem="Hely">
        <NewCommandTemplate>
            <Button hidden />
        </NewCommandTemplate>
        <EditCommandTemplate>
            @if ((context.Item as Hely).Meddig == null)
            {
                <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">
                    Módosítás
                </Blazorise.Button>
            }
        </EditCommandTemplate>
        <DeleteCommandTemplate>
            @if ((context.Item as Hely).Meddig == null)
            {
                <Blazorise.Button Color="Color.Primary" Clicked="@context.Clicked">
                    Törlés
                </Blazorise.Button>
            }
        </DeleteCommandTemplate>
    </DataGridCommandColumn>

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.EszkozID)" Caption="Micsoda" Editable="true">
        <DisplayTemplate>
            @((context as Hely )?.Eszkoz.Nev)
        </DisplayTemplate>
        <EditTemplate>
            <SelectList Data="@eszkozLista"
                        TextField="@((item)=>item.Nev)"
                        ValueField="@((item)=>item.ID)"
                        SelectedValue="@((int)( ( (CellEditContext)context ).CellValue ))"
                        SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = int.Parse((string)v))" />
        </EditTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.EszkozHelyID)" Caption="Hol" Editable="true">
        <DisplayTemplate>
            @((context as Hely )?.EszkozHely.Nev)
        </DisplayTemplate>
        <EditTemplate>
            <SelectList Data="@eszkozHelyLista"
                        TextField="@((item)=>item.Nev)"
                        ValueField="@((item)=>item.ID)"
                        SelectedValue="@((int)( ( (CellEditContext)context ).CellValue ))"
                        SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = int.Parse((string)v))" />
        </EditTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.Mennyiseg)" Caption="Mennyit" Editable="true" />

    <DataGridColumn TItem="Hely" Field="@nameof(Hely.Mikortol)" Caption="Mikortól" Editable="true" />
</DataGrid>
@code {
    List<Hely> lista;
    List<EszkozHely> eszkozHelyLista;
    List<Eszkoz> eszkozLista;
    public bool collapse1Visible;
    public string ma = DateTime.Now.ToString();

    int count;

    private async Task SearchHely(MouseEventArgs e)
    {
        var response = await repo.ListBeszerzesek(searchService.beszerezesFilter, searchService.PageSize, 1);

        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }

    async Task OnReadData(DataGridReadDataEventArgs<Hely> e)
    {
        var request = new
        {
            Sort = e.Columns
                .Where(_ => _.Direction != SortDirection.None)
                .Select(_ => new { mezo = _.Field, order = _.Direction == SortDirection.Ascending ? "A" : "D" })  // *** Need a property to OrderBy here ***
        };
        searchService.beszerezesFilter.Sorrend = request.Sort.Select(c => new Tuple<string, string>(c.mezo, c.order)).ToList();

        var response = await repo.ListBeszerzesek(searchService.beszerezesFilter, searchService.PageSize, e.Page);
        eszkozHelyLista = await repo.GetXHovaBeszerzesList();
        eszkozLista = await repo.GetXMitList();
        lista = response.Data;
        count = response.Total;

        StateHasChanged();
    }

    async Task OnAfterUpdate(SavedRowItem<Hely, Dictionary<string, object>> e)
    {
        // todo validálni, meg menteni, ha hiba van, akkor e.cancel = true

        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            var mentettBeszerzes = await repo.HelyModositas(e.Item);
            ts.Complete();
        }

        // ez nemtom kell-e ide...
        // always call StateHasChanged!
        StateHasChanged();
    }

    async Task OnAfterDeleted(Hely e)
    {
        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            e.Mennyiseg = 0;
            var removedBeszerzes = await repo.HelyModositas(e);
            ts.Complete();
        }

        StateHasChanged();
    }
}
