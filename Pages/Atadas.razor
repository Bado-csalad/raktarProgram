@page "/atadas"
@using Blazorise.Components
@inject IHomeRespitory repo

<h1>Átadás</h1>



<Row>
    <Column ColumnSize="ColumnSize.Is3">
        <Alert Color="Color.Primary" Visible="true">
            Mit:
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
       <Autocomplete Data="@xmitLista"
            TextField="@((item)=>item.Nev)"
            ValueField="@((item)=>item.ID)"
            SelectedValueChanged="@selectedEszkozChangedHandler"
            Placeholder="Search..." 
            Filter="AutocompleteFilter.Contains" />
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is3">
        <Alert Color="Color.Primary" Visible="true">
            Honnan:
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
       <Autocomplete  Data="@xkitolList"
            TextField="@((item)=>item.EszkozhelyNev)"
            ValueField="@((item)=>item.ID)"
            SelectedValueChanged="@selectedHelyChangedHandler" 
            Placeholder="Search..." 
            Filter="AutocompleteFilter.Contains"/>
    </Column>
</Row>
 <Row>
    <Column ColumnSize="ColumnSize.Is3">
        <Alert Color="Color.Primary" Visible="true">
            Hova:
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
       <Autocomplete  Data="@xhovaList"
            TextField="@((item)=>item.Nev)"
            ValueField="@((item)=>item.ID)"
            SelectedValueChanged="@selectedHovaChangedHandler" 
            Placeholder="Search..." 
            Filter="AutocompleteFilter.Contains"/>
    </Column>
</Row>



@code {
    List<Eszkoz> xmitLista = null;
    List<Hely> xkitolList = null;
    List<EszkozHely> xhovaList = null;
    Eszkoz xmit;
    Hely xkitol;
    EszkozHely xhova;
   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.xmitLista = await this.repo.GetXMitList();
            StateHasChanged();
        }
    }

    async Task selectedEszkozChangedHandler(object newEszkoz)
    {
        xmit = this.xmitLista.First(c => c.ID == (int)newEszkoz);

        this.xkitolList = await this.repo.GetXKitolList(xmit.ID);
        StateHasChanged();
    }

    async Task selectedHelyChangedHandler(object newHely)
    {
        xkitol = this.xkitolList.First(c => c.ID == (int)newHely);
        
        this.xhovaList = await this.repo.GetXHovaList(xkitol.ID);
        StateHasChanged();
    }

    async Task selectedHovaChangedHandler(object newHova)
    {
        xhova = this.xhovaList.First(c => c.ID == (int)newHova);
        StateHasChanged();
    }
}
